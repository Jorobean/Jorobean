// API Configuration
const SUPABASE_URL = 'https://vkdvweyatwcfqbocezjv.supabase.co/functions/v1';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZrZHZ3ZXlhdHdjZnFib2Nlemp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3NjQ1MTgsImV4cCI6MjA3MTM0MDUxOH0.orSkIBG-3jVd1Trv9mKT6UD5JVNw7Opy4xLJa_A5E5I';

// Store state
const state = {
    products: [],
    cart: [],
    selectedVariant: null
};
async function initStore() {
    console.log('Starting store initialization...');
    console.log('State before init:', JSON.stringify(state));
    
    const productsContainer = document.getElementById('products-container');
    
    if (!productsContainer) {
        console.error('Products container not found! Make sure the element with id "products-container" exists.');
        return;
    }
    
    try {
        // Show loading state
        productsContainer.innerHTML = '<div class="loading-spinner">' +
            '<div class="spinner"></div>' +
            '<p>Loading products...</p>' +
            '</div>';

        console.log('Fetching products from API...');
        console.log('API URL:', SUPABASE_URL + '/products');
        console.log('API Key:', 'Bearer ' + SUPABASE_ANON_KEY.substring(0, 10) + '...');
        
        const response = await fetch(SUPABASE_URL + '/products', {
            headers: {
                'Authorization': 'Bearer ' + SUPABASE_ANON_KEY,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error('API response not OK:', {
                status: response.status,
                statusText: response.statusText
            });
            throw new Error('Failed to load products: ' + response.status + ' ' + response.statusText);
        }

        const responseText = await response.text();
        console.log('Raw API response:', responseText);
        
        // Try to parse as JSON
        try {
            const data = JSON.parse(responseText);
            console.log('Parsed products data:', JSON.stringify(data, null, 2));

            if (data.error) {
                throw new Error(data.error);
            }

            if (!Array.isArray(data)) {
                console.error('Unexpected data format:', data);
                throw new Error('Invalid data format: expected array but got ' + typeof data);
            }

            state.products = data;
            console.log('State after update:', JSON.stringify(state));
            console.log('Loaded ' + data.length + ' products successfully');
            
            // Call renderProducts and check its result
            console.log('Calling renderProducts...');
            renderProducts();
            
            // Verify the container was updated
            console.log('Container HTML after render:', productsContainer.innerHTML);

        } catch (parseError) {
            console.error('Failed to parse API response:', parseError);
            throw new Error('Failed to parse API response: ' + parseError.message);
        }

    } catch (error) {
        console.error('Error loading products:', error);
        productsContainer.innerHTML = '<div class="error-message">' +
            '<h3>Failed to load products</h3>' +
            '<p>' + error.message + '</p>' +
            '<button onclick="initStore()">Try Again</button>' +
            '</div>';
    }
}

// Render products
function renderProducts() {
    console.log('Starting renderProducts()...');
    console.log('Current state:', JSON.stringify(state));
    
    const productsContainer = document.getElementById('products-container');
    
    if (!productsContainer) {
        console.error('Products container not found in renderProducts()');
        return;
    }
    
    if (!state.products || !Array.isArray(state.products)) {
        console.error('Invalid products data:', state.products);
        productsContainer.innerHTML = '<div class="error-message">' +
            '<h3>Error Loading Products</h3>' +
            '<p>Invalid product data received. Please try again later.</p>' +
            '<button onclick="initStore()">Try Again</button>' +
            '</div>';
        return;
    }
    
    if (state.products.length === 0) {
        console.log('No products found');
        productsContainer.innerHTML = 
            '<div class="no-products">' +
                '<h3>No Products Available</h3>' +
                '<p>Check back soon for new products!</p>' +
            '</div>';
        return;
    }

    console.log('Rendering ' + state.products.length + ' products...');
    
    try {
        const productsHTML = state.products.map((product, index) => {
            console.log('Processing product ' + (index + 1) + ':', product);
            
            if (!product || !product.sync_product) {
                console.error('Invalid product structure:', product);
                return ''; // Skip invalid products
            }

            // Extract product data with default values
            const {
                thumbnail_url: imageUrl = 'broken-heart.png',
                name: productName = 'Product Name Not Available',
                id: productId = null
            } = product.sync_product;
            
            // Calculate starting price safely
            let startingPrice = '0.00';
            if (product.sync_variants && Array.isArray(product.sync_variants) && product.sync_variants.length > 0) {
                startingPrice = product.sync_variants[0].retail_price || '0.00';
            }
            
            if (!productId) {
                console.error('Product ID missing:', product);
                return ''; // Skip products without ID
            }

            console.log('Generating HTML for product:', {
                productId,
                productName,
                imageUrl,
                startingPrice
            });

            // Build the product card HTML
            return '<div class="product-card" data-product-id="' + productId + '">' +
                '<div class="product-image-container">' +
                    '<img src="' + imageUrl + '" ' +
                        'alt="' + productName + '" ' +
                        'class="product-image" ' +
                        'loading="lazy" ' +
                        'onerror="this.src=\'broken-heart.png\'">' +
                '</div>' +
                '<div class="product-info">' +
                    '<h3 class="product-title">' + productName + '</h3>' +
                    '<p class="product-price">Starting at $' + startingPrice + '</p>' +
                    '<button class="view-variants-btn" data-product-id="' + productId + '">' +
                        'Select Size' +
                    '</button>' +
                '</div>' +
            '</div>';
        }).filter(Boolean).join(''); // Remove empty strings from invalid products

        if (!productsHTML) {
            console.error('No valid products to display');
            productsContainer.innerHTML = '<div class="error-message">' +
                '<h3>Error Loading Products</h3>' +
                '<p>Unable to process product data. Please try again later.</p>' +
                '<button onclick="initStore()">Try Again</button>' +
                '</div>';
            return;
        }

        console.log('Setting container HTML...');
        productsContainer.innerHTML = productsHTML;
        console.log('Products rendered successfully');
        
    } catch (error) {
        console.error('Error in renderProducts():', error);
        productsContainer.innerHTML = '<div class="error-message">' +
            '<h3>Error Displaying Products</h3>' +
            '<p>' + error.message + '</p>' +
            '<button onclick="initStore()">Try Again</button>' +
            '</div>';
    }
}

// Show product details
function showProductDetails(productId) {
    try {
        console.log('Opening details for product ID:', productId);
        console.log('Current state:', state);
        
        // First ensure we have the product
        const product = state.products.find(p => String(p.sync_product.id) === String(productId));
        console.log('Found product:', product);
        
        if (!product) {
            console.error('Product not found:', productId);
            throw new Error('Product not found');
        }

        if (!product.sync_variants || !product.sync_variants.length) {
            console.error('No variants for product:', product.sync_product.name);
            throw new Error('No variants available for this product');
        }

        console.log('Product details:', {
            name: product.sync_product.name,
            description: product.sync_product.description,
            variants: product.sync_variants,
            fullProduct: product
        });

    // Sort variants by size
    const sizeOrder = ['XS', 'S', 'M', 'L', 'XL', '2XL'];
    const sortedVariants = [...product.sync_variants].sort((a, b) => {
        return sizeOrder.indexOf(a.size) - sizeOrder.indexOf(b.size);
    });

    // Add styles for the modal if they don't exist
    if (!document.getElementById('product-dialog-styles')) {
        const style = document.createElement('style');
        style.id = 'product-dialog-styles';
        style.textContent = [
            '.product-description {',
            '    display: flex;',
            '    flex-direction: column;',
            '    gap: 1.5rem;',
            '    margin: 1.5rem 0;',
            '}',
            '.product-main-desc {',
            '    font-size: 1.1rem;',
            '    line-height: 1.5;',
            '    color: var(--text-primary, #333);',
            '}',
            '.product-features {',
            '    background: var(--features-bg, #f5f5f5);',
            '    padding: 1.25rem;',
            '    border-radius: 8px;',
            '}',
            '.product-features h4 {',
            '    margin: 0 0 0.75rem 0;',
            '    color: var(--text-primary, #333);',
            '}',
            '.product-features ul {',
            '    margin: 0;',
            '    padding-left: 1.25rem;',
            '}',
            '.product-features li {',
            '    margin-bottom: 0.5rem;',
            '    color: var(--text-secondary, #666);',
            '}',
            '.product-note {',
            '    font-size: 0.9rem;',
            '    padding: 1rem;',
            '    border-left: 3px solid var(--accent-color, #4CAF50);',
            '    background: var(--note-bg, #f9f9f9);',
            '    color: var(--text-secondary, #666);',
            '}',
            '.product-note strong {',
            '    color: var(--text-primary, #333);',
            '}',
            '@media (prefers-color-scheme: dark) {',
            '    .product-description {',
            '        --text-primary: #e0e0e0;',
            '        --text-secondary: #b0b0b0;',
            '        --features-bg: #2a2a2a;',
            '        --note-bg: #2a2a2a;',
            '        --accent-color: #66bb6a;',
            '    }',
            '}'
        ].join('\n');
        document.head.appendChild(style);
    }

    // Remove any existing dialogs first
        const existingDialog = document.querySelector('.product-dialog');
        if (existingDialog) {
            existingDialog.remove();
        }

        // Create new modal dialog
        const modal = document.createElement('div');
        modal.className = 'product-dialog';
        
        console.log('Creating variant buttons for sizes:', sortedVariants.map(v => v.size));

        const variantButtons = sortedVariants.map(function(v) {
            const isDisabled = v.availability_status !== 'active';
            console.log('Creating button for variant:', {
                id: v.id,
                size: v.size,
                isDisabled: isDisabled
            });
            return [
                '<button',
                '    class="size-button"',
                '    data-variant-id="' + v.id + '"',
                    (isDisabled ? ' disabled' : ''),
                '>',
                '    ' + v.size,
                '</button>'
            ].join('\n');
        }).join('\n');

        modal.innerHTML = [
            '<div class="dialog-overlay"></div>',
            '<div class="dialog-content">',
            '    <div class="dialog-header">',
            '        <h2>' + product.sync_product.name + '</h2>',
            '        <button class="close-button" id="closeProductDialog">×</button>',
            '    </div>',
            '    <div class="dialog-body">',
            '        <div class="product-image-section">',
            '            <img src="' + product.sync_product.thumbnail_url + '" alt="' + product.sync_product.name + '" class="dialog-image">',
            '        </div>',
            '        <div class="product-details">',
            '            <p class="price">$' + sortedVariants[0].retail_price + '</p>',
            '            <div class="product-description">',
            '                <p class="product-main-desc">Discover comfort and style combined in this premium t-shirt. Soft, lightweight, and perfectly stretchy for a flattering fit on everyone.</p>',
            '                <div class="product-features">',
            '                    <h4>Features:</h4>',
            '                    <ul>',
            '                        <li>Ultra-soft 100% combed and ring-spun cotton</li>',
            '                        <li>Lightweight 4.2 oz./yd.² fabric</li>',
            '                        <li>Pre-shrunk to maintain perfect fit</li>',
            '                        <li>Premium side-seamed construction</li>',
            '                        <li>Reinforced shoulder-to-shoulder taping</li>',
            '                    </ul>',
            '                </div>',
            '                <div class="product-note">',
            '                    <p><strong>Made Just for You:</strong> Each item is crafted on demand when you order,',
            '                    supporting sustainable production and reducing waste. Please allow extra time for', 
            '                    your custom-made item to reach you.</p>',
            '                </div>',
            '            </div>',
            '            ',
            '            <div class="size-selector">',
            '                <h3>Select Size:</h3>',
            '                <div class="size-grid">',
            variantButtons,
            '                </div>',
            '            </div>',
            '            <div class="quantity-selector">',
            '                <h3>Quantity:</h3>',
            '                <div class="quantity-controls">',
            '                    <button class="quantity-btn minus" disabled>−</button>',
            '                    <input type="number" class="quantity-input" value="1" min="1" max="99" disabled>',
            '                    <button class="quantity-btn plus" disabled>+</button>',
            '                </div>',
            '            </div>',
            '            <button class="add-to-cart-btn" disabled>Add to Cart</button>',
            '        </div>',
            '    </div>',
            '</div>'
        ].join('\n');
        document.body.appendChild(modal);

        const closeBtn = modal.querySelector('#closeProductDialog');
        const overlay = modal.querySelector('.dialog-overlay');
        
        const closeModal = () => modal.remove();
        closeBtn.addEventListener('click', closeModal);
        overlay.addEventListener('click', closeModal);

        // Add event listeners for size buttons
        modal.querySelectorAll('.size-button').forEach(button => {
            button.addEventListener('click', () => {
                modal.querySelectorAll('.size-button').forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                modal.querySelector('.add-to-cart-btn').disabled = false;
                const variantId = button.dataset.variantId;
                state.selectedVariant = sortedVariants.find(v => v.id === parseInt(variantId));
                
                if (state.selectedVariant) {
                    modal.querySelector('.price').textContent = '$' + state.selectedVariant.retail_price;
                    // Enable quantity controls when size is selected
                    modal.querySelector('.quantity-btn.minus').disabled = false;
                    modal.querySelector('.quantity-input').disabled = false;
                    modal.querySelector('.quantity-btn.plus').disabled = false;
                }
            });
        });

        // Add event listeners for quantity controls
        const quantityInput = modal.querySelector('.quantity-input');
        const minusBtn = modal.querySelector('.quantity-btn.minus');
        const plusBtn = modal.querySelector('.quantity-btn.plus');

        quantityInput.addEventListener('change', (e) => {
            let value = parseInt(e.target.value);
            if (isNaN(value) || value < 1) value = 1;
            if (value > 99) value = 99;
            e.target.value = value;
            minusBtn.disabled = value <= 1;
        });

        minusBtn.addEventListener('click', () => {
            let value = parseInt(quantityInput.value) - 1;
            if (value >= 1) {
                quantityInput.value = value;
                minusBtn.disabled = value <= 1;
            }
        });

        plusBtn.addEventListener('click', () => {
            let value = parseInt(quantityInput.value) + 1;
            if (value <= 99) {
                quantityInput.value = value;
                minusBtn.disabled = false;
            }
        });

        // Add to cart functionality
        modal.querySelector('.add-to-cart-btn').addEventListener('click', () => {
            if (state.selectedVariant) {
                const quantity = parseInt(modal.querySelector('.quantity-input').value);
                addToCart({
                    id: product.id,
                    name: product.sync_product.name,
                    thumbnail_url: product.sync_product.thumbnail_url,
                    selectedVariant: state.selectedVariant,
                    quantity: quantity
                });
                
                // Show success feedback
                const feedback = document.createElement('div');
                feedback.className = 'add-to-cart-feedback';
                feedback.textContent = 'Added ' + quantity + ' ' + (quantity === 1 ? 'item' : 'items') + ' to cart';
                document.body.appendChild(feedback);
                setTimeout(() => feedback.remove(), 2000);
                
                closeModal();
            }
        });
    } catch (error) {
        console.error('Error showing product details:', error);
        const feedback = document.createElement('div');
        feedback.className = 'error-feedback';
        feedback.textContent = 'Error: ' + error.message;
        document.body.appendChild(feedback);
        setTimeout(() => feedback.remove(), 3000);
    }
}

// Cart functionality
function addToCart(product) {
    const cartItem = {
        id: product.selectedVariant.id,
        productId: product.id,
        name: product.name,
        price: parseFloat(product.selectedVariant.retail_price),
        size: product.selectedVariant.size,
        color: product.selectedVariant.color,
        thumbnail: product.thumbnail_url,
        quantity: product.quantity || 1
    };

    const existingItem = state.cart.find(item => item.id === cartItem.id);
    const cartSidebar = document.getElementById('cart-sidebar');
    
    // Show cart sidebar when adding items
    if (!cartSidebar.classList.contains('open')) {
        cartSidebar.classList.add('open');
        document.getElementById('cart-overlay').style.display = 'block';
    }

    if (existingItem) {
        existingItem.quantity += cartItem.quantity;
        // Update existing item display
        const itemSelector = '.cart-item[data-item-id="' + existingItem.id + '"]';
        const itemElement = document.querySelector(itemSelector);
        if (itemElement) {
            itemElement.querySelector('.quantity-display').textContent = existingItem.quantity;
            const price = (existingItem.price * existingItem.quantity).toFixed(2);
            itemElement.querySelector('.cart-item-price').textContent = '$' + price;
            // Highlight updated item
            itemElement.style.animation = 'highlightItem 1s ease';
        }
    } else {
        state.cart.push(cartItem);
        // Add new item with animation
        const cartItems = document.getElementById('cart-items');
        if (cartItems) {
            const newItemElement = document.createElement('div');
            newItemElement.className = 'cart-item';
            newItemElement.dataset.itemId = cartItem.id;
            
            const itemHtml = [
                '<img src="' + cartItem.thumbnail + '" alt="' + cartItem.name + '" class="cart-item-image">',
                '<div class="cart-item-details">',
                '    <h4>' + cartItem.name + '</h4>',
                '    <p>Size: ' + cartItem.size + '</p>',
                '    <div class="quantity-controls">',
                '        <button class="quantity-btn minus" data-item-id="' + cartItem.id + '" data-action="decrease">−</button>',
                '        <span class="quantity-display">1</span>',
                '        <button class="quantity-btn plus" data-item-id="' + cartItem.id + '" data-action="increase">+</button>',
                '    </div>',
                '    <button class="remove-item" data-item-id="' + cartItem.id + '">Remove</button>',
                '</div>',
                '<div class="cart-item-price" data-item-id="' + cartItem.id + '">',
                '    $' + cartItem.price.toFixed(2),
                '</div>'
            ].join('\n');

            newItemElement.innerHTML = itemHtml;
            newItemElement.style.opacity = '0';
            cartItems.appendChild(newItemElement);
            // Trigger animation
            setTimeout(() => {
                newItemElement.style.transition = 'opacity 0.3s ease';
                newItemElement.style.opacity = '1';
            }, 50);
        }
    }

    updateCartCount();
    updateCartTotal();
    
    // Show feedback animation
    const feedback = document.createElement('div');
    feedback.className = 'add-to-cart-feedback';
    feedback.textContent = 'Added to cart!';
    document.body.appendChild(feedback);
    setTimeout(() => feedback.remove(), 2000);
}

function updateCartCount() {
    const cartCount = document.querySelector('.cart-count');
    const totalItems = state.cart.reduce((sum, item) => sum + item.quantity, 0);
    
    // Animate count change
    cartCount.style.transform = 'scale(1.2)';
    cartCount.textContent = totalItems;
    cartCount.style.display = totalItems > 0 ? 'block' : 'none';
    
    setTimeout(() => {
        cartCount.style.transform = 'scale(1)';
    }, 200);
}

function updateCartTotal() {
    const total = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const cartTotal = document.querySelector('#cart-total');
    if (cartTotal) {
        cartTotal.style.animation = 'none';
        cartTotal.offsetHeight; // Trigger reflow
        cartTotal.textContent = '$' + total.toFixed(2);
        cartTotal.style.animation = 'totalUpdate 0.3s ease';
    }
    
    // Update checkout total if it exists
    const checkoutTotal = document.querySelector('.order-total');
    if (checkoutTotal) {
        checkoutTotal.querySelector('p').innerHTML = 
            '<strong>Total:</strong> $' + total.toFixed(2);
    }
}

function updateCartSidebar() {
    const cartItems = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    const cartSidebar = document.getElementById('cart-sidebar');

    if (!cartItems || !cartTotal) {
        console.error('Cart elements not found');
        return;
    }

    if (state.cart.length === 0) {
        cartItems.innerHTML = '<p class="empty-cart">Your cart is empty</p>';
        cartTotal.textContent = '$0.00';
        
        // Add disabled checkout button for empty cart
        const cartFooter = document.createElement('div');
        cartFooter.className = 'cart-footer';
        cartFooter.innerHTML = [
            '<div class="cart-total-section">',
            '    <strong>Total:</strong>',
            '    <span class="cart-total">$0.00</span>',
            '</div>',
            '<button class="checkout-btn" disabled>Proceed to Checkout</button>'
        ].join('\n');
        cartSidebar.appendChild(cartFooter);
        return;
    }

    cartItems.innerHTML = state.cart.map(function(item) {
        return [
            '<div class="cart-item" data-item-id="' + item.id + '">',
            '    <img src="' + item.thumbnail + '" alt="' + item.name + '" class="cart-item-image">',
            '    <div class="cart-item-details">',
            '        <h4>' + item.name + '</h4>',
            '        <p>Size: ' + item.size + '</p>',
            '        <div class="quantity-info">',
            '            <p class="item-price-single">$' + item.price.toFixed(2) + ' each</p>',
            '            <div class="quantity-controls">',
            '                <button class="quantity-btn minus" data-item-id="' + item.id + '" data-action="decrease">−</button>',
            '                <span class="quantity-display">' + item.quantity + '</span>',
            '                <button class="quantity-btn plus" data-item-id="' + item.id + '" data-action="increase">+</button>',
            '            </div>',
            '        </div>',
            '        <button class="remove-item" data-item-id="' + item.id + '">Remove</button>',
            '    </div>',
            '    <div class="cart-item-price" data-item-id="' + item.id + '">',
            '        $' + (item.price * item.quantity).toFixed(2),
            '    </div>',
            '</div>'
        ].join('\n');
    }).join('');

    const total = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.textContent = '$' + total.toFixed(2);

    // Add checkout button to cart footer
    const cartFooter = document.createElement('div');
    cartFooter.className = 'cart-footer';
    cartFooter.innerHTML = [
        '<div class="cart-total-section">',
        '    <strong>Total:</strong>',
        '    <span class="cart-total">$' + total.toFixed(2) + '</span>',
        '</div>',
        '<button class="checkout-btn">Proceed to Checkout</button>'
    ].join('\n');
    
    // Remove any existing footer
    const existingFooter = cartSidebar.querySelector('.cart-footer');
    if (existingFooter) {
        existingFooter.remove();
    }
    
    cartSidebar.appendChild(cartFooter);

    // Add event listener for checkout button
    const checkoutButton = cartFooter.querySelector('.checkout-btn');
    checkoutButton.addEventListener('click', () => {
        console.log('Checkout button clicked');
        // Close cart sidebar
        cartSidebar.classList.remove('open');
        document.getElementById('cart-overlay').style.display = 'none';
        // Show checkout form
        showCheckoutForm();
    });

    // Add event listener to checkout button
    const checkoutBtn = cartFooter.querySelector('.checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', () => {
            // Close the cart sidebar first
            document.getElementById('cart-sidebar').classList.remove('open');
            document.getElementById('cart-overlay').style.display = 'none';
            // Show checkout form
            showCheckoutForm();
        });
    }

    // Add event listeners for quantity buttons
    cartItems.querySelectorAll('.quantity-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const itemId = parseInt(e.target.dataset.itemId);
            const action = e.target.dataset.action;
            const item = state.cart.find(item => item.id === itemId);
            if (item) {
                const quantitySpan = e.target.parentElement.querySelector('span');
                if (action === 'increase') {
                    updateQuantity(itemId, item.quantity + 1);
                    quantitySpan.textContent = item.quantity + 1;
                } else if (action === 'decrease' && item.quantity > 1) {
                    updateQuantity(itemId, item.quantity - 1);
                    quantitySpan.textContent = item.quantity - 1;
                } else if (action === 'decrease' && item.quantity === 1) {
                    updateQuantity(itemId, 0); // This will remove the item
                }
            }
        });
    });

    // Add event listener to checkout button
    cartFooter.querySelector('.checkout-btn').addEventListener('click', showCheckoutForm);
}

function updateQuantity(itemId, newQuantity) {
    const parsedId = parseInt(itemId);
    const cartItem = document.querySelector('.cart-item[data-item-id="' + parsedId + '"]');
    
    if (newQuantity < 1) {
        // Animate removal
        if (cartItem) {
            cartItem.style.transition = 'all 0.3s ease';
            cartItem.style.opacity = '0';
            cartItem.style.height = '0';
            setTimeout(() => {
                state.cart = state.cart.filter(item => item.id !== parsedId);
                updateCartDisplay();
            }, 300);
        }
    } else {
        const item = state.cart.find(item => item.id === parsedId);
        if (item) {
            item.quantity = newQuantity;
            if (cartItem) {
                // Update quantity display
                cartItem.querySelector('.quantity-display').textContent = newQuantity;
                // Update price display
                cartItem.querySelector('.cart-item-price').textContent = 
                    '$' + (item.price * newQuantity).toFixed(2);
                // Animate price update
                cartItem.querySelector('.cart-item-price').style.animation = 
                    'priceUpdate 0.3s ease';
            }
        }
    }
    
    updateCartCount();
    updateCartTotal();
}

// Checkout functionality
function showCheckoutForm() {
    console.log('Showing checkout form');
    // Check if cart is empty
    if (state.cart.length === 0) {
        const feedback = document.createElement('div');
        feedback.className = 'add-to-cart-feedback';
        feedback.style.background = '#ff4444';
        feedback.textContent = 'Your cart is empty!';
        document.body.appendChild(feedback);
        setTimeout(() => feedback.remove(), 2000);
        return;
    }

    // Make sure any existing checkout modal is removed
    const existingModal = document.querySelector('.checkout-modal');
    if (existingModal) {
        existingModal.remove();
    }

    // First, close the cart sidebar
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    if (cartSidebar && cartOverlay) {
        cartSidebar.classList.remove('open');
        cartOverlay.style.display = 'none';
    }
    
    // Ensure checkout-styles are added
    if (!document.getElementById('checkout-styles')) {
        const style = document.createElement('style');
        style.id = 'checkout-styles';
        style.textContent = [
        '    .checkout-modal {',
        '        position: fixed;',
        '        top: 0;',
        '        left: 0;',
        '        width: 100%;',
        '        height: 100%;',
        '        z-index: 1000;',
        '        display: flex;',
        '        justify-content: center;',
        '        align-items: center;',
        '    }',
        '    .checkout-overlay {',
        '        position: fixed;',
        '        top: 0;',
        '        left: 0;',
        '        width: 100%;',
        '        height: 100%;',
        '        background: rgba(0, 0, 0, 0.75);',
        '        z-index: 1001;',
        '    }',
        '    .checkout-content {',
        '        position: relative;',
        '        background: var(--dialog-bg, #ffffff);',
        '        color: var(--dialog-text, #000000);',
        '        padding: 2rem;',
        '        border-radius: 8px;',
        '        max-width: 90%;',
        '        width: 800px;',
        '        max-height: 90vh;',
        '        overflow-y: auto;',
        '        z-index: 1002;',
        '        box-shadow: 0 5px 15px rgba(0,0,0,0.3);',
        '    }',
        '    @media (prefers-color-scheme: dark) {',
        '        .checkout-content {',
        '            --dialog-bg: #1a1a1a;',
        '            --dialog-text: #ffffff;',
        '        }',
        '    }'
    ].join('\n');
        document.head.appendChild(style);
    }

    // Create checkout modal
    const modal = document.createElement('div');
    modal.className = 'checkout-modal';
    // Add checkout styles if they don't exist
    if (!document.getElementById('checkout-styles')) {
        const style = document.createElement('style');
        style.id = 'checkout-styles';
        style.textContent = [
            '.checkout-form {',
            '    display: grid;',
            '    grid-template-columns: 1fr 1fr;',
            '    gap: 2rem;',
            '    max-width: 1200px;',
            '    margin: 0 auto;',
            '}',
            '.checkout-form .order-summary {',
            '    grid-column: 1 / -1;',
            '}',
            '.form-section {',
            '    background: var(--section-bg, #f8f8f8);',
            '    padding: 1.5rem;',
            '    border-radius: 8px;',
            '}',
            '.form-group {',
            '    margin-bottom: 1rem;',
            '}',
            '.form-group label {',
            '    display: block;',
            '    margin-bottom: 0.5rem;',
            '    color: var(--label-color, #333);',
            '    font-weight: 500;',
            '}',
            '.form-group input {',
            '    width: 100%;',
            '    padding: 0.75rem;',
            '    border: 1px solid var(--input-border, #ddd);',
            '    border-radius: 4px;',
            '    font-size: 1rem;',
            '}',
            '.form-row {',
            '    display: grid;',
            '    grid-template-columns: 2fr 1fr 1fr;',
            '    gap: 1rem;',
            '}',
            '.card-row {',
            '    display: grid;',
            '    grid-template-columns: 3fr 1fr;',
            '    gap: 1rem;',
            '}',
            '.order-items {',
            '    margin: 1rem 0;',
            '    border-top: 1px solid var(--border-color, #eee);',
            '}',
            '.order-item {',
            '    display: grid;',
            '    grid-template-columns: 80px 1fr auto;',
            '    gap: 1rem;',
            '    padding: 1rem 0;',
            '    border-bottom: 1px solid var(--border-color, #eee);',
            '}',
            '.order-item img {',
            '    width: 80px;',
            '    height: 80px;',
            '    object-fit: cover;',
            '    border-radius: 4px;',
            '}',
            '.order-total {',
            '    text-align: right;',
            '    padding: 1rem 0;',
            '    font-size: 1.25rem;',
            '}',
            '.submit-btn {',
            '    grid-column: 1 / -1;',
            '    background: #000;',
            '    color: white;',
            '    padding: 1rem;',
            '    border: none;',
            '    border-radius: 4px;',
            '    font-size: 1.1rem;',
            '    cursor: pointer;',
            '    display: flex;',
            '    align-items: center;',
            '    justify-content: center;',
            '    gap: 0.5rem;',
            '}',
            '.submit-btn:disabled {',
            '    opacity: 0.7;',
            '    cursor: not-allowed;',
            '}',
            '@media (max-width: 768px) {',
            '    .checkout-form {',
            '        grid-template-columns: 1fr;',
            '    }',
            '}',
            '@media (prefers-color-scheme: dark) {',
            '    .form-section {',
            '        --section-bg: #2a2a2a;',
            '    }',
            '    .form-group label {',
            '        --label-color: #e0e0e0;',
            '    }',
            '    .order-items {',
            '        --border-color: #404040;',
            '    }',
            '}'
        ].join('\n');
        document.head.appendChild(style);
    }

    const orderItemsHtml = state.cart.map(function(item) {
        return [
            '<div class="order-item">',
            '    <img src="' + item.thumbnail + '" alt="' + item.name + '">',
            '    <div class="order-item-details">',
            '        <p class="item-name">' + item.name + '</p>',
            '        <p class="item-variant">Size: ' + item.size + '</p>',
            '        <p class="item-quantity">Qty: ' + item.quantity + '</p>',
            '    </div>',
            '    <p class="item-price">$' + (item.price * item.quantity).toFixed(2) + '</p>',
            '</div>'
        ].join('\n');
    }).join('');

    const totalAmount = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);

    // Create product dialog overlay
        const modalHtml = [
            '<div class="dialog-overlay"></div>',
            '<div class="dialog-content">',
            '    <div class="dialog-header">',
            '        <h2>' + product.sync_product.name + '</h2>',
            '        <button class="close-button" id="closeProductDialog" aria-label="Close dialog">×</button>',
            '    </div>',
        '    <div class="dialog-body">',
        '        <form id="checkout-form" class="checkout-form">',
        '            <div class="form-section">',
        '                <h3>Contact Information</h3>',
        '                <div class="form-group">',
        '                    <label for="name">Full Name</label>',
        '                    <input type="text" id="name" name="name" required autocomplete="name">',
        '                </div>',
        '                <div class="form-group">',
        '                    <label for="email">Email</label>',
        '                    <input type="email" id="email" name="email" required autocomplete="email">',
        '                </div>',
        '                <div class="form-group">',
        '                    <label for="phone">Phone (optional)</label>',
        '                    <input type="tel" id="phone" name="phone" pattern="[0-9]{10}" placeholder="1234567890" autocomplete="tel">',
        '                </div>',
        '            </div>',
        '            ',
        '            <div class="form-section">',
        '                <h3>Payment Information</h3>',
        '                <div class="form-group">',
        '                    <label for="card">Card Number</label>',
        '                    <input type="text" id="card" name="card" required ',
        '                        pattern="[0-9]{16}" maxlength="16" ',
        '                        placeholder="0000 0000 0000 0000" ',
        '                        autocomplete="cc-number">',
        '                </div>',
        '                <div class="card-row">',
        '                    <div class="form-group">',
        '                        <label for="expiry">Expiration Date</label>',
        '                        <input type="text" id="expiry" name="expiry" required ',
        '                            pattern="[0-9]{2}/[0-9]{2}" maxlength="5" ',
        '                            placeholder="MM/YY" ',
        '                            autocomplete="cc-exp">',
        '                    </div>',
        '                    <div class="form-group">',
        '                        <label for="cvc">CVC</label>',
        '                        <input type="text" id="cvc" name="cvc" required ',
        '                            pattern="[0-9]{3,4}" maxlength="4" ',
        '                            placeholder="123" ',
        '                            autocomplete="cc-csc">',
        '                    </div>',
        '                </div>',
        '            </div>',
        '',
        '            <div class="form-section">',
        '                <h3>Shipping Address</h3>',
        '                <div class="form-group">',
        '                    <label for="address1">Street Address</label>',
        '                    <input type="text" id="address1" name="address1" required autocomplete="address-line1">',
        '                </div>',
        '                <div class="form-group">',
        '                    <label for="address2">Apartment, suite, etc. (optional)</label>',
        '                    <input type="text" id="address2" name="address2" autocomplete="address-line2">',
        '                </div>',
        '                <div class="form-row">',
        '                    <div class="form-group">',
        '                        <label for="city">City</label>',
        '                        <input type="text" id="city" name="city" required autocomplete="address-level2">',
        '                    </div>',
        '                    <div class="form-group">',
        '                        <label for="state">State</label>',
        '                        <input type="text" id="state" name="state" required autocomplete="address-level1">',
        '                    </div>',
        '                    <div class="form-group">',
        '                        <label for="zip">ZIP Code</label>',
        '                        <input type="text" id="zip" name="zip" required ',
        '                            pattern="[0-9]{5}" maxlength="5" ',
        '                            autocomplete="postal-code">',
        '                    </div>',
        '                </div>',
        '            </div>',
        '',
        '            <div class="order-summary">',
        '                <h3>Order Summary</h3>',
        '                <div class="order-items">',
        orderItemsHtml,
        '                </div>',
        '                <div class="order-total">',
        '                    <p><strong>Total:</strong> $' + totalAmount + '</p>',
        '                </div>',
        '            </div>',
        '',
        '            <button type="submit" class="submit-btn">',
        '                <span>Place Order</span>',
        '                <svg viewBox="0 0 24 24" width="16" height="16">',
        '                    <path fill="currentColor" d="M4 12h16M16 6l6 6-6 6"/>',
        '                </svg>',
        '            </button>',
        '        </form>',
        '    </div>',
        '</div>'
    ].join('\n');

    modal.innerHTML = modalHtml;

    document.body.appendChild(modal);

    const closeBtn = document.getElementById('closeCheckout');
    const overlay = modal.querySelector('.checkout-overlay');
    const form = document.getElementById('checkout-form');

    const closeModal = () => modal.remove();
    closeBtn.addEventListener('click', closeModal);
    overlay.addEventListener('click', closeModal);

    // Add input formatting
    const cardInput = form.querySelector('#card');
    const expiryInput = form.querySelector('#expiry');
    
    cardInput?.addEventListener('input', (e) => {
        let value = e.target.value.replace(/\D/g, '');
        e.target.value = value.replace(/(\d{4})(?=\d)/g, '$1 ');
    });

    expiryInput?.addEventListener('input', (e) => {
        let value = e.target.value.replace(/\D/g, '');
        if (value.length >= 2) {
            value = value.slice(0, 2) + '/' + value.slice(2);
        }
        e.target.value = value;
    });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = form.querySelector('.submit-btn');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span>Processing...</span>';
        
        try {
            const formData = new FormData(e.target);
            
            // Required field validation
            const requiredFields = ['name', 'email', 'address1', 'city', 'state', 'zip', 'card', 'expiry', 'cvc'];
            const missingFields = requiredFields.filter(field => !formData.get(field));
            
            if (missingFields.length > 0) {
                throw new Error('Please fill in all required fields: ' + missingFields.join(', '));
            }

            // Email validation
            const email = formData.get('email');
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                throw new Error('Please enter a valid email address');
            }

            // Phone validation (if provided)
            const phone = formData.get('phone');
            if (phone && !/^\d{10}$/.test(phone)) {
                throw new Error('Phone number must be 10 digits');
            }

            // ZIP code validation
            const zip = formData.get('zip');
            if (!/^\d{5}$/.test(zip)) {
                throw new Error('ZIP code must be 5 digits');
            }

            // Card validation
            const card = formData.get('card').replace(/\s/g, '');
            const expiry = formData.get('expiry');
            const [expMonth, expYear] = expiry.split('/');
            const now = new Date();
            const currentYear = now.getFullYear() % 100;
            const currentMonth = now.getMonth() + 1;

            // Validate card number (Luhn algorithm)
            const isValidCard = card.length === 16 && card.split('')
                .reverse()
                .map(x => parseInt(x))
                .map((x, i) => i % 2 === 0 ? x : x * 2)
                .map(x => x > 9 ? x - 9 : x)
                .reduce((acc, x) => acc + x) % 10 === 0;

            // Validate expiry
            const isValidExpiry = parseInt(expYear) > currentYear || 
                (parseInt(expYear) === currentYear && parseInt(expMonth) >= currentMonth);

            if (!isValidCard) {
                throw new Error('Invalid card number');
            }

            if (!isValidExpiry) {
                throw new Error('Card has expired');
            }

            // Generate unique order ID
            const orderDate = new Date();
            const customOrderId = 'JB' + 
                orderDate.getFullYear() +
                (orderDate.getMonth() + 1).toString().padStart(2, '0') +
                orderDate.getDate().toString().padStart(2, '0') +
                Math.random().toString(36).substr(2, 5).toUpperCase();

            // Calculate costs
            const subtotal = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const shipping = 0.00; // You might want to calculate this based on location
            const taxRate = 0.0875; // Example tax rate (8.75%)
            const tax = subtotal * taxRate;
            const total = subtotal + shipping + tax;

            // Prepare order data according to Printful API spec
            const orderData = {
                recipient: {
                    name: formData.get('name'),
                    email: formData.get('email'),
                    address1: formData.get('address1'),
                    address2: formData.get('address2') || '',
                    city: formData.get('city'),
                    state_code: formData.get('state').toUpperCase(),
                    country_code: 'US',
                    zip: formData.get('zip'),
                    phone: formData.get('phone') || ''
                },
                items: state.cart.map(item => ({
                    sync_variant_id: item.id,
                    quantity: item.quantity,
                    retail_price: item.price.toString(),
                    name: item.name,
                    size: item.size
                })),
                retail_costs: {
                    subtotal: subtotal.toFixed(2),
                    shipping: shipping.toFixed(2),
                    tax: tax.toFixed(2),
                    total: total.toFixed(2)
                },
                gift: null,
                packing_slip: {
                    email: formData.get('email'),
                    phone: formData.get('phone') || '',
                    message: '',
                    store_name: 'Jorobean',
                    custom_order_id: customOrderId
                },
                confirm: true,
                payment: {
                    card_number: '*'.repeat(12) + card.slice(-4),
                    expiry: expiry,
                    card_holder: formData.get('name'),
                    payment_method: 'credit_card',
                    transaction_id: 'TR' + customOrderId
                }
            };

            // Submit order to backend which will create it in Printful
            const response = await fetch(SUPABASE_URL + '/order', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + SUPABASE_ANON_KEY,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });

            const data = await response.json();
            
            // Handle Printful's response
            if (!response.ok || (data.code !== 200 && data.code !== 202)) {
                throw new Error(data.result || data.error || 'Failed to place order');
            }

            // Store order in localStorage for order history
            try {
                const orderHistory = JSON.parse(localStorage.getItem('orderHistory') || '[]');
                orderHistory.push({
                    id: orderData.packing_slip.custom_order_id,
                    date: new Date().toISOString(),
                    items: orderData.items,
                    total: orderData.retail_costs.total,
                    status: 'confirmed'
                });
                localStorage.setItem('orderHistory', JSON.stringify(orderHistory));
            } catch (e) {
                console.error('Failed to save order to history:', e);
            }

            // Order successful - clear cart and show success message
            state.cart = [];
            updateCartCount();
            updateCartTotal();
            closeModal();
            
            const successMessage = document.createElement('div');
            successMessage.className = 'success-message';
            const itemCount = orderData.items.reduce((sum, item) => sum + item.quantity, 0);
            successMessage.innerHTML = [
                '<div class="success-content">',
                '    <svg viewBox="0 0 24 24" width="32" height="32">',
                '        <path fill="#4CAF50" d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>',
                '    </svg>',
                '    <h3>Order Placed Successfully!</h3>',
                '    <p>Thank you for your purchase!</p>',
                '    <p>Order ID: ' + orderData.packing_slip.custom_order_id + '</p>',
                '    <p>You will receive a confirmation email at ' + orderData.recipient.email + '</p>',
                '    <div class="order-summary">',
                '        <p>Order Total: $' + orderData.retail_costs.total + '</p>',
                '        <p>Items: ' + itemCount + '</p>',
                '    </div>',
                '</div>'
            ].join('\n');
            document.body.appendChild(successMessage);
            
            // Remove success message after animation
            setTimeout(() => {
                successMessage.style.opacity = '0';
                setTimeout(() => successMessage.remove(), 500);
            }, 5000);

        } catch (error) {
            console.error('Checkout error:', error);
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<span>Place Order</span>';
            
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.innerHTML = [
                '<div class="error-content">',
                '    <svg viewBox="0 0 24 24" width="24" height="24">',
                '        <path fill="#ff4444" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>',
                '    </svg>',
                '    <p>' + error.message + '</p>',
                '</div>'
            ].join('\n');
            document.body.appendChild(errorMessage);
            
            // Remove error message after animation
            setTimeout(() => {
                errorMessage.style.opacity = '0';
                setTimeout(() => errorMessage.remove(), 500);
            }, 3000);
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<span>Place Order</span>';
        }
    });
}

// Cart sidebar toggle
document.getElementById('cart-button')?.addEventListener('click', () => {
    document.getElementById('cart-sidebar').classList.add('open');
    document.getElementById('cart-overlay').style.display = 'block';
});

document.querySelector('.close-cart')?.addEventListener('click', () => {
    document.getElementById('cart-sidebar').classList.remove('open');
    document.getElementById('cart-overlay').style.display = 'none';
});

document.getElementById('cart-overlay')?.addEventListener('click', () => {
    document.getElementById('cart-sidebar').classList.remove('open');
    document.getElementById('cart-overlay').style.display = 'none';
});

// Initialize product click handlers
function initProductClickHandlers() {
    console.log('Initializing product click handlers...');
    const productsContainer = document.getElementById('products-container');
    
    if (!productsContainer) {
        console.error('Products container not found for click handlers');
        return;
    }

    // Remove any existing event listeners
    const newContainer = productsContainer.cloneNode(true);
    productsContainer.parentNode.replaceChild(newContainer, productsContainer);

    // Add click handler
    newContainer.addEventListener('click', (event) => {
        const variantBtn = event.target.closest('.view-variants-btn');
        if (variantBtn) {
            event.preventDefault();
            const productId = variantBtn.dataset.productId;
            console.log('Product button clicked:', {
                productId: productId,
                buttonElement: variantBtn,
                event: event
            });
            
            if (productId) {
                showProductDetails(productId);
            } else {
                console.error('No product ID found on clicked button');
            }
        }
    });
    
    console.log('Product click handlers initialized');
}

// Initialize the store
// Initialize the store - ensure DOM is loaded
function initializeStore() {
    // First, check if the DOM has already loaded
    if (document.readyState === 'loading') {
        // If not loaded yet, wait for DOMContentLoaded
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM Content Loaded - initializing store...');
            initStore();
            initProductClickHandlers();
        });
    } else {
        // If already loaded, initialize immediately
        console.log('DOM already loaded - initializing store...');
        initStore();
        initProductClickHandlers();
    }
}

// Start initialization
initializeStore();
