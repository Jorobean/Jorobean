// API Configuration
const SUPABASE_URL = 'https://vkdvweyatwcfqbocezjv.supabase.co/functions/v1';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZrZHZ3ZXlhdHdjZnFib2Nlemp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3NjQ1MTgsImV4cCI6MjA3MTM0MDUxOH0.orSkIBG-3jVd1Trv9mKT6UD5JVNw7Opy4xLJa_A5E5I';

// Store state
const state = {
    products: [],
    cart: [],
    selectedVariant: null
};

// Initialize store
async function initStore() {
    const productsContainer = document.getElementById('products-container');
    
    try {
        // Show loading state
        productsContainer.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Loading products...</p>
            </div>
        `;

        // Fetch products from Supabase Edge Function
        const response = await fetch(`${SUPABASE_URL}/products`, {
            headers: {
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const responseText = await response.text();
        const data = JSON.parse(responseText);

        if (data.error) {
            throw new Error(data.error);
        }

        state.products = data;
        console.log(`Loaded ${data.length} products successfully`);
        renderProducts();

    } catch (error) {
        console.error('Error loading products:', error);
        productsContainer.innerHTML = `
            <div class="error-message">
                <h3>Failed to load products</h3>
                <p>${error.message}</p>
                <button onclick="initStore()">Try Again</button>
            </div>
        `;
    }
}

// Render products
function renderProducts() {
    const productsContainer = document.getElementById('products-container');
    
    if (!state.products.length) {
        productsContainer.innerHTML = `
            <div class="no-products">
                <h3>No Products Available</h3>
                <p>Check back soon for new products!</p>
            </div>
        `;
        return;
    }

    const productsHTML = state.products.map(product => {
        if (!product.sync_product) {
            console.error('Product missing sync_product data');
            return '';
        }

        const imageUrl = product.sync_product.thumbnail_url;
        const productName = product.sync_product.name;
        const productId = product.sync_product.id;
        const price = product.sync_variants && product.sync_variants[0] ? 
            parseFloat(product.sync_variants[0].retail_price).toFixed(2) : '0.00';

        return `
            <div class="product-card" data-product-id="${productId}" role="button" tabindex="0">
                <div class="product-image-container">
                    <img 
                        src="${imageUrl}" 
                        alt="${productName}"
                        class="product-image"
                        loading="lazy"
                        onerror="this.src='broken-heart.png'"
                    >
                </div>
                <div class="product-info">
                    <h3 class="product-title">${productName}</h3>
                    <p class="product-price">$${price}</p>
                    <button 
                        class="view-variants-btn" 
                        data-product-id="${productId}"
                    >
                        Select Size
                    </button>
                </div>
            </div>
        `;
    }).join('');

    productsContainer.innerHTML = productsHTML;
}

// Show product details
function showProductDetails(productId) {
    try {
        console.log('Opening details for product ID:', productId);
        
        const product = state.products.find(p => String(p.sync_product.id) === String(productId));
        if (!product) {
            throw new Error('Product not found');
        }

        if (!product.sync_variants || !product.sync_variants.length) {
            throw new Error('No variants available for this product');
        }

        // Sort variants by size
        const sizeOrder = ['XS', 'S', 'M', 'L', 'XL', '2XL'];
        const sortedVariants = [...product.sync_variants].sort((a, b) => {
            return sizeOrder.indexOf(a.size) - sizeOrder.indexOf(b.size);
        });

        const modal = document.createElement('div');
        modal.className = 'product-dialog';
        modal.innerHTML = `
            <div class="dialog-overlay"></div>
            <div class="dialog-content">
                <div class="dialog-header">
                    <h2>${product.sync_product.name}</h2>
                    <button class="close-button" id="closeProductDialog">×</button>
                </div>
                <div class="dialog-body">
                    <div class="product-image-section">
                        <img src="${product.sync_product.thumbnail_url}" 
                             alt="${product.sync_product.name}" 
                             class="dialog-image">
                    </div>
                    <div class="product-details">
                        <p class="price">$${parseFloat(sortedVariants[0].retail_price).toFixed(2)}</p>
                        <div class="product-description">
                            <h3>About Product</h3>
                            <p>This t-shirt is everything you've dreamed of and more. It feels soft and lightweight, with the right amount of stretch. It's comfortable and flattering for all.</p>
                            
                            <ul>
                                • 100% combed and ring-spun cotton (Heather colors contain polyester)
                                • Fabric weight: 4.2 oz./yd.² (142 g/m²)
                                • Pre-shrunk fabric
                                • Side-seamed construction
                                • Shoulder-to-shoulder taping
                                • Blank product sourced from Nicaragua, Mexico, Honduras, or the US
                            </ul>

                            <p>This product is made especially for you as soon as you place an order, which is why it takes us a bit longer to deliver it to you. Making products on demand instead of in bulk helps reduce overproduction, so thank you for making thoughtful purchasing decisions!</p>
                        </div>
                        <div class="size-selector">
                            <h3>Size</h3>
                            <div class="size-grid">
                                ${sortedVariants.map(v => `
                                    <button 
                                        class="size-button" 
                                        data-variant-id="${v.id}"
                                        ${v.availability_status !== 'active' ? 'disabled' : ''}
                                    >
                                        ${v.size}
                                    </button>
                                `).join('')}
                            </div>
                        </div>
                        <div class="quantity-selector">
                            <label>Quantity</label>
                            <div class="quantity-controls">
                                <button class="quantity-decrease">−</button>
                                <span>1</span>
                                <button class="quantity-increase">+</button>
                            </div>
                        </div>
                        <button class="add-to-cart-btn" disabled>Add to cart</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        const closeBtn = modal.querySelector('#closeProductDialog');
        const overlay = modal.querySelector('.dialog-overlay');
        
        const closeModal = () => modal.remove();
        closeBtn.addEventListener('click', closeModal);
        overlay.addEventListener('click', closeModal);

        // Add event listeners for size buttons
        modal.querySelectorAll('.size-button').forEach(button => {
            button.addEventListener('click', () => {
                modal.querySelectorAll('.size-button').forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                modal.querySelector('.add-to-cart-btn').disabled = false;
                const variantId = button.dataset.variantId;
                state.selectedVariant = sortedVariants.find(v => v.id === parseInt(variantId));
                
                if (state.selectedVariant) {
                    modal.querySelector('.price').textContent = `$${parseFloat(state.selectedVariant.retail_price).toFixed(2)}`;
                }
            });
        });

        // Add quantity control functionality
        let quantity = 1;
        const quantitySpan = modal.querySelector('.quantity-controls span');
        const decreaseBtn = modal.querySelector('.quantity-decrease');
        const increaseBtn = modal.querySelector('.quantity-increase');

        decreaseBtn.addEventListener('click', () => {
            if (quantity > 1) {
                quantity--;
                quantitySpan.textContent = quantity;
            }
        });

        increaseBtn.addEventListener('click', () => {
            if (quantity < 10) {  // Set a reasonable maximum
                quantity++;
                quantitySpan.textContent = quantity;
            }
        });

        // Add to cart functionality
        modal.querySelector('.add-to-cart-btn').addEventListener('click', () => {
            if (state.selectedVariant) {
                addToCart({
                    id: product.id,
                    name: product.sync_product.name,
                    thumbnail_url: product.sync_product.thumbnail_url,
                    selectedVariant: state.selectedVariant,
                    quantity: quantity
                });
                closeModal();
            }
        });

    } catch (error) {
        console.error('Error showing product details:', error);
    }
}

// Cart functionality
function addToCart(product) {
    const cartItem = {
        id: product.selectedVariant.id,
        productId: product.id,
        name: product.name,
        price: parseFloat(product.selectedVariant.retail_price),
        size: product.selectedVariant.size,
        color: product.selectedVariant.color,
        thumbnail: product.thumbnail_url,
        quantity: product.quantity || 1
    };

    const existingItem = state.cart.find(item => item.id === cartItem.id);
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        state.cart.push(cartItem);
    }

    updateCartCount();
    updateCartSidebar();
}

function updateCartCount() {
    const cartCount = document.querySelector('.cart-count');
    const totalItems = state.cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;
    cartCount.style.display = totalItems > 0 ? 'block' : 'none';
}

function updateCartSidebar() {
    const cartItems = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    const cartSidebar = document.getElementById('cart-sidebar');

    if (!cartItems || !cartTotal) {
        console.error('Cart elements not found');
        return;
    }

    if (state.cart.length === 0) {
        cartItems.innerHTML = '<p class="empty-cart">Your cart is empty</p>';
        cartTotal.textContent = '$0.00';
        return;
    }

    cartItems.innerHTML = state.cart.map(item => `
        <div class="cart-item">
            <img src="${item.thumbnail}" alt="${item.name}" class="cart-item-image">
            <div class="cart-item-details">
                <h4>${item.name}</h4>
                <p>Size: ${item.size}</p>
                <p>Color: ${item.color}</p>
                <div class="quantity-controls">
                    <button onclick="updateQuantity('${item.id}', ${item.quantity - 1})">-</button>
                    <span>${item.quantity}</span>
                    <button onclick="updateQuantity('${item.id}', ${item.quantity + 1})">+</button>
                </div>
            </div>
            <div class="cart-item-price">
                $${(item.price * item.quantity).toFixed(2)}
            </div>
        </div>
    `).join('');

    const total = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.textContent = `$${total.toFixed(2)}`;

    // Add checkout button to cart footer
    const cartFooter = document.createElement('div');
    cartFooter.className = 'cart-footer';
    cartFooter.innerHTML = `
        <div class="cart-total-section">
            <strong>Total:</strong>
            <span class="cart-total">$${total.toFixed(2)}</span>
        </div>
        <button class="checkout-btn">Proceed to Checkout</button>
    `;
    
    // Remove any existing footer
    const existingFooter = cartSidebar.querySelector('.cart-footer');
    if (existingFooter) {
        existingFooter.remove();
    }
    
    cartSidebar.appendChild(cartFooter);

    // Add event listener to checkout button
    cartFooter.querySelector('.checkout-btn').addEventListener('click', showCheckoutForm);
}

function updateQuantity(itemId, newQuantity) {
    if (newQuantity < 1) {
        state.cart = state.cart.filter(item => item.id !== parseInt(itemId));
    } else {
        const item = state.cart.find(item => item.id === parseInt(itemId));
        if (item) {
            item.quantity = newQuantity;
        }
    }
    updateCartCount();
    updateCartSidebar();
}

// Checkout functionality
function showCheckoutForm() {
    // First, close the cart sidebar
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    if (cartSidebar && cartOverlay) {
        cartSidebar.classList.remove('open');
        cartOverlay.style.display = 'none';
    }

    // Create checkout modal
    const modal = document.createElement('div');
    modal.className = 'checkout-modal';
    modal.innerHTML = `
        <div class="checkout-overlay"></div>
        <div class="checkout-content">
            <div class="dialog-header">
                <h2>Checkout</h2>
                <button class="close-button" id="closeCheckout">×</button>
            </div>
            <div class="dialog-body">
                <form id="checkout-form" class="checkout-form">
                    <div class="form-section">
                        <h3>Contact Information</h3>
                        <div class="form-group">
                            <label for="name">Full Name</label>
                            <input type="text" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h3>Shipping Address</h3>
                        <div class="form-group">
                            <label for="address1">Street Address</label>
                            <input type="text" id="address1" name="address1" required>
                        </div>
                        <div class="form-group">
                            <label for="address2">Apartment, suite, etc. (optional)</label>
                            <input type="text" id="address2" name="address2">
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="city">City</label>
                                <input type="text" id="city" name="city" required>
                            </div>
                            <div class="form-group">
                                <label for="state">State</label>
                                <input type="text" id="state" name="state" required>
                            </div>
                            <div class="form-group">
                                <label for="zip">ZIP Code</label>
                                <input type="text" id="zip" name="zip" required pattern="[0-9]{5}">
                            </div>
                        </div>
                    </div>

                    <div class="order-summary">
                        <h3>Order Summary</h3>
                        <div class="order-items">
                            ${state.cart.map(item => `
                                <div class="order-item">
                                    <img src="${item.thumbnail}" alt="${item.name}">
                                    <div class="order-item-details">
                                        <p class="item-name">${item.name}</p>
                                        <p class="item-variant">Size: ${item.size}</p>
                                        <p class="item-quantity">Qty: ${item.quantity}</p>
                                    </div>
                                    <p class="item-price">$${(item.price * item.quantity).toFixed(2)}</p>
                                </div>
                            `).join('')}
                        </div>
                        <div class="order-total">
                            <p><strong>Total:</strong> $${state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2)}</p>
                        </div>
                    </div>

                    <button type="submit" class="submit-btn">
                        <span>Place Order</span>
                        <svg viewBox="0 0 24 24" width="16" height="16">
                            <path fill="currentColor" d="M4 12h16M16 6l6 6-6 6"/>
                        </svg>
                    </button>
                </form>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    const closeBtn = document.getElementById('closeCheckout');
    const overlay = modal.querySelector('.checkout-overlay');
    const form = document.getElementById('checkout-form');

    const closeModal = () => modal.remove();
    closeBtn.addEventListener('click', closeModal);
    overlay.addEventListener('click', closeModal);

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = form.querySelector('.submit-btn');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span>Processing...</span>';
        
        try {
            const formData = new FormData(e.target);
            const orderData = {
                recipient: {
                    name: formData.get('name'),
                    email: formData.get('email'),
                    address1: formData.get('address1'),
                    address2: formData.get('address2'),
                    city: formData.get('city'),
                    state_code: formData.get('state'),
                    country_code: 'US',
                    zip: formData.get('zip')
                },
                items: state.cart.map(item => ({
                    sync_variant_id: item.id,
                    quantity: item.quantity
                }))
            };

            const response = await fetch(`${SUPABASE_URL}/order`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });

            const data = await response.json();
            if (response.ok) {
                state.cart = [];
                updateCartCount();
                updateCartSidebar();
                closeModal();
                
                const successMessage = document.createElement('div');
                successMessage.className = 'success-message';
                successMessage.textContent = 'Order placed successfully!';
                document.body.appendChild(successMessage);
                setTimeout(() => successMessage.remove(), 3000);
            } else {
                throw new Error(data.error || 'Failed to place order');
            }
        } catch (error) {
            console.error('Checkout error:', error);
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.textContent = error.message;
            document.body.appendChild(errorMessage);
            setTimeout(() => errorMessage.remove(), 3000);
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<span>Place Order</span>';
        }
    });
}

// Cart sidebar toggle
document.getElementById('cart-button')?.addEventListener('click', () => {
    document.getElementById('cart-sidebar').classList.add('open');
    document.getElementById('cart-overlay').style.display = 'block';
});

document.querySelector('.close-cart')?.addEventListener('click', () => {
    document.getElementById('cart-sidebar').classList.remove('open');
    document.getElementById('cart-overlay').style.display = 'none';
});

document.getElementById('cart-overlay')?.addEventListener('click', () => {
    document.getElementById('cart-sidebar').classList.remove('open');
    document.getElementById('cart-overlay').style.display = 'none';
});

// Initialize product click handlers
function initProductClickHandlers() {
    const productsContainer = document.getElementById('products-container');
    if (productsContainer) {
        productsContainer.addEventListener('click', (event) => {
            const productCard = event.target.closest('.product-card');
            if (productCard) {
                event.preventDefault();
                const productId = productCard.dataset.productId;
                showProductDetails(productId);
            }
        });

        // Add keyboard accessibility
        productsContainer.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                const productCard = event.target.closest('.product-card');
                if (productCard) {
                    event.preventDefault();
                    const productId = productCard.dataset.productId;
                    if (productId) {
                        showProductDetails(productId);
                    }
                }
            }
        });
    }
}

// Initialize the store
document.addEventListener('DOMContentLoaded', () => {
    initStore();
    initProductClickHandlers();
});
